{
  "name": "stepper-wiringpi",
  "version": "0.0.2",
  "description": "Module to control a stepper motor",
  "main": "src/stepper-wiringpi.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wiring-pi": "^2.1.1"
  },
  "keywords": [
    "stepper",
    "motor",
    "node.js",
    "raspberry pi"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nkolban/node-stepper-wiringpi.git"
  },
  "os": [
    "linux"
  ],
  "cpu": [
    "arm"
  ],
  "author": {
    "name": "Neil Kolban"
  },
  "license": "MIT",
  "gitHead": "fe440db00910cdb033b9a2a81ff0e84514d68b1a",
  "bugs": {
    "url": "https://github.com/nkolban/node-stepper-wiringpi/issues"
  },
  "homepage": "https://github.com/nkolban/node-stepper-wiringpi#readme",
  "_id": "stepper-wiringpi@0.0.2",
  "_shasum": "d5415d963636b8d1ba4c697ee2802c95f95aca09",
  "_from": "node_modules/stepper-wiringpi",
  "_npmVersion": "2.15.0",
  "_nodeVersion": "4.4.2",
  "_npmUser": {
    "name": "kolban",
    "email": "kolban1@kolban.com"
  },
  "dist": {
    "shasum": "6cc970d95437a2ca4df54c48b47c8b3598d718eb",
    "tarball": "https://registry.npmjs.org/stepper-wiringpi/-/stepper-wiringpi-0.0.2.tgz"
  },
  "maintainers": [
    {
      "name": "kolban",
      "email": "kolban1@kolban.com"
    }
  ],
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/stepper-wiringpi-0.0.2.tgz_1464323299115_0.7235413424205035"
  },
  "directories": {},
  "_resolved": "file:node_modules/stepper-wiringpi",
  "readme": "# stepper-wiringpi\n\nControl a stepper motor from the Raspberry Pi.\n\n## Install\nThe package can be installed using `npm`.\n\n```\n$ npm install stepper-wiringpi\n```\n\n## Usage\nThe class controls a stepper motor.  It has a number of core capabilities that are motor related.  First we have the\nnotion of the rotation speed.  This is measured in rotations per minute (RPM) and is adjusted with the call to:\n\n```\nmotor.setSpeed(60);\n```\n\nwhich would set the RPM of the motor to one rotation a second.  Setting the speed doesn't actually cause the motor to\nturn.  We would then call one of the direction functions which are:\n\n```\nmotor.forward();\n```\n\nand\n\n```\nmotor.backward();\n```\n\nCalling either of these starts the motor turning at the currently set speed.  If we change the speed while the motor is\nrotating, it will change the rate of rotation.\n\nIf we wish to stop a motor from turning, we can call:\n\n```\nmotor.stop();\n```\n\nWe do not have to stop a motor before changing direction.  We can choose to call:\n```\nmotor.forward();\nmotor.backward();\n```\n\nThere is a second mode of operation where we can specify an exact number of steps to turn and the motor will rotate\nthose steps at the current speed.\n\n```\nmotor.step(10);\n```\n\nwill rotate the motor forwards 10 steps while\n\n```\nmotor.step(-10);\n```\n\nthe `step` function has an additional optional parameter which is a callback function that is invoked when the steps have been made.\n\nwill rotate the motor backwards 10 steps.\n\nTo mechanically use the package, first we include the package with a call to `require` naming the package we wish to include.\n\n```\nvar StepperWiringPi = require(\"stepper-wiringpi\");\n```\n\nFrom here, we can create instances of a stepper motor driver using:\n\n```\nvar motor = StepperWiringPi.setup(stepsInRevolution, pin1, pin2, pin3, pin4);\n```\n\nThe object returned is an instance of a motor that can be driven.\n\nTo support multiple stepper motor physical types, the package supports 2, 4 and 5 wire interfaces.  The choice of which type is used\nis specified by the number of pins supplied in the `setup` call.\n\nIn summary, the methods are:\n\n| Method                                                       | Description                |\n|--------------------------------------------------------------|----------------------------|\n| `setup(stepsInRevolution, pin1, pin2, [pin3, pin4, [pin5]])` | Setup the motor            |\n| `setSpeed(rpm)`                                              | Set the speed of rotation  |\n| `forward()`                                                  | Start rotating forwards    |\n| `backward()`                                                 | Start rotating backwards   |\n| `stop()`                                                     | Stop rotating              |\n| `step(steps, [callback])`                                    | Step the motor             |\n| `halt()`                                                     | Halt the motor (free turn) |\n\n## Dependencies\nThis package depends upon:\n\n* [Wiring-Pi](https://github.com/eugeneware/wiring-pi) - Node.js binding to wiringPi\n\n\n## Design Notes\nThis package is a port of the Arduino Stepper library to Node.js and the Node.js WiringPi package.  Re-designs were\nmade to include support for JavaScript oriented usage such as non-blocking.  The original Arduino stepper\nlibrary can be found here:\n\n[https://github.com/arduino/Arduino/tree/master/libraries/Stepper](https://github.com/arduino/Arduino/tree/master/libraries/Stepper)\n\nIt is anticipated that one use of this package will be to control wheeled robots.  Because of this, it will likely be necessary to support\nmultiple instances of the class, one per motor. \n\nGiven that each motor requires 2, 4 or 5 discrete GPIO pins, we can see that we will quickly run out of available pins on todays current\ndevices.  For example, for a 2 wheeled robot using 4 pin stepper motors, we will immediately consume 8 GPIOs.  This leads us to believe that\nwe may very well need to include support for popular GPIO expanders.  An idea/issue has been raised with the Wiring-Pi project for\nNode.js to investigate the addition of that support into the base Wiring-Pi package which is where we believe it should be implemented.\n\n",
  "readmeFilename": "README.md"
}
